@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JS

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin="" />
    <script src="/leaflet.js" type="module"></script>
    <script type="module">
        var GLOBAL = {};
        GLOBAL.DotNetReference = null;
        window.setDotnetReference = (pDotNetReference) => {
            GLOBAL.DotNetReference = pDotNetReference;
        };
        window.loadMap = (lat, long) => {  
            var map = leaflet.map('map').setView([lat, long], 6);
            L.tileLayer("https://{s}.tile.jawg.io/jawg-lagoon/{z}/{x}/{y}{r}.png?access-token=2vhEyC3R5NE78zGZKRa0Ii1osq9ZbhAmM4v8UIVWf4wAWSvvD11GEQnxfCuNSzJU", {
                attribution:
                    '<a href="http://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">&copy; <b>Jawg</b>Maps</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                accessToken: '2vhEyC3R5NE78zGZKRa0Ii1osq9ZbhAmM4v8UIVWf4wAWSvvD11GEQnxfCuNSzJU'
            }).addTo(map);
            L.tileLayer("http://maps.openweathermap.org/maps/2.0/weather/PR0/{z}/{x}/{y}?appid=6718004e99fa5e8a92fd526818590b15", {
                accessToken: '6718004e99fa5e8a92fd526818590b15'
            }).addTo(map);
            L.tileLayer("http://maps.openweathermap.org/maps/2.0/weather/PAC0/{z}/{x}/{y}?appid=6718004e99fa5e8a92fd526818590b15", {
                accessToken: '6718004e99fa5e8a92fd526818590b15'
            }).addTo(map);

            map.on("moveend", () => {
                var latlng = map.getCenter();
                GLOBAL.DotNetReference.invokeMethodAsync("UpdateWeatherData", latlng.lng, latlng.lat);
            });
        }
    </script>
    <script>
        function formatAMPM(date) {
            var hours = date.getHours();
            var minutes = date.getMinutes();
            var ampm = hours >= 12 ? 'pm' : 'am';
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour '0' should be '12'
            minutes = minutes < 10 ? '0' + minutes : minutes;
            var strTime = hours + ':' + minutes + ' ' + ampm;
            return strTime;
        }

        function UpdateCurrentData(currentData) {
            var currentData = JSON.parse(currentData);
            document.getElementById("weather-data-loc").innerHTML = currentData.name;
            document.getElementById("weather-data-temp").innerHTML = Math.round(currentData.main.temp - 273.15) + "°C";
            document.getElementById("weather-data-icon").innerHTML = "<img src='https://openweathermap.org/img/wn/" + currentData.weather[0].icon + "&#64;" + "2x.png' unselectable='on'></img>";
            document.getElementById("weather-data-desc").innerHTML = currentData.weather[0].description;
            document.getElementById("weather-data-hl").innerHTML = "H:" + Math.round(currentData.main.temp_max - 273.15) + "° L:" + Math.round(currentData.main.temp_min - 273.15) + "°";
            document.getElementById("weather-data-extra-feels-like").innerHTML = "Feels Like: " + Math.round(currentData.main.feels_like - 273.15) + "°C";
            document.getElementById("weather-data-extra-pressure").innerHTML = "Pressure: " + currentData.main.pressure + "hPa";
            document.getElementById("weather-data-extra-humidity").innerHTML = "Humidity: " + currentData.main.humidity + "%";
            document.getElementById("weather-data-extra-sunset").innerHTML = "Sunset: " + formatAMPM(new Date(currentData.sys.sunset * 1000));
            document.getElementById("weather-data-extra-sunrise").innerHTML = "Sunrise: " + formatAMPM(new Date(currentData.sys.sunrise * 1000));
        }

        function UpdateHourlyForecastData(hourlyForecastData) {
            var hourlyForecastData = JSON.parse(hourlyForecastData);
            var forecastLimit = 24; // forecast 24 hours
            var foracastTable = document.getElementById("hourly-forecast-data-table");
            foracastTable.innerHTML = "<tr></tr><tr></tr><tr></tr>";
            for (let i = 0; i < forecastLimit; i++) {
                var data = hourlyForecastData.list[i];
                var timeCell = foracastTable.rows[0].insertCell(i);
                var iconCell = foracastTable.rows[1].insertCell(i);
                var tempCell = foracastTable.rows[2].insertCell(i);
                timeCell.innerText = formatAMPM(new Date(data.dt * 1000));
                iconCell.innerHTML = "<img src='https://openweathermap.org/img/wn/" + data.weather[0].icon + "&#64;" + "2x.png' unselectable='on'></img>";
                tempCell.innerText = Math.round(data.main.temp - 273.15) + "°C";
            }
        }

        function UpdateDailyForecastData(dailyForecastData) {
            var dailyForecastData = JSON.parse(dailyForecastData);
            var dailyForecastTable = document.getElementById("daily-forecast-data-table");
            dailyForecastTable.innerHTML = "";
            for (let i = 0; i < dailyForecastData.list.length; i++) {
                var data = dailyForecastData.list[i];
                console.log(data);
                console.log(data.weather[0].icon);
                var row = dailyForecastTable.insertRow(-1);
                var timeCell = row.insertCell(0);
                var iconCell = row.insertCell(1);
                var tempCell = row.insertCell(2);
                var date = new Date(data.dt * 1000);
                var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                var day = days[date.getDay()];
                timeCell.innerText = day;
                iconCell.innerHTML = "<img src='https://openweathermap.org/img/wn/" + data.weather[0].icon + "&#64;" + "2x.png' unselectable='on'></img>";
                tempCell.innerText = Math.round(data.temp.day - 273.15) + "°C";

            }
        }

        window.updateData = (currentData, hourlyForecastData, dailyForecastData) => {
            UpdateCurrentData(currentData);
            UpdateHourlyForecastData(hourlyForecastData);
            UpdateDailyForecastData(dailyForecastData);
        }
    </script>
</head>
<div id="container">
    <div id="weather-data">
        <h4 id="weather-data-loc"></h4>
        <div id="weather-data-temp"></div>
        <div id="weather-data-icon"></div>
        <div id="weather-data-desc"></div>
        <div id="weather-data-hl"></div>
    </div>
    <div id="daily-forecast">
        <h4>Daily Forecast</h4>
        <div id="daily-forecast-data">
            <table id="daily-forecast-data-table" class="center">
                <tr><td></td><td></td><td></td><td></td></tr>
            </table>
        </div>
    </div>
    <div id="weather-data-extra">
        <div id="weather-data-extra-feels-like"></div>
        <div id="weather-data-extra-pressure"></div>
        <div id="weather-data-extra-humidity"></div>
        <div id="weather-data-extra-sunset"></div>
        <div id="weather-data-extra-sunrise"></div>
    </div>
    
    <div id="hourly-forecast">
        <h4>24Hr Forecast</h4>
        <div id="hourly-forecast-data">
            <table id="hourly-forecast-data-table" class="center">
                <tr></tr>
                <tr></tr>
                <tr></tr>
            </table>
        </div>
    </div>
    
    
    <div id="map"></div>
</div>
<script src="/leafletMap.js" type="module">
</script>

@inject IJSRuntime JS
@code {
    private string? weatherData;
    private double defaultLongitude = 153.0260;
    private double defaultLatitude = -27.4705;
    private OpenWeatherAPI? openWeatherAPI;

    public class OpenWeatherAPI
    {
        private string? currentData;
        private string? forecastData;
        private string? dailyForecastData;
        private double longtitude;
        private double latitude;
        private string apiKey = "6718004e99fa5e8a92fd526818590b15";

        public OpenWeatherAPI(double longitude, double latitude)
        {
            this.SetLongitudeLatitude(longitude, latitude);
        }

        public void SetLongitudeLatitude(double longitude, double latitude)
        {
            this.longtitude = longitude;
            this.latitude = latitude;
        }

        private async Task<string> SendHttpRequest(string requestUri)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, requestUri);
            request.Headers.Add("Accept", "application/json");
            HttpClient client = new HttpClient();
            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            string responseBody = await response.Content.ReadAsStringAsync();
            return responseBody;
        }

        private async Task FetchCurrentData()
        {
            var requestUri = $"https://api.openweathermap.org/data/2.5/weather?lat={this.latitude}&lon={this.longtitude}&appid={this.apiKey}";
            this.currentData = await SendHttpRequest(requestUri);
        }

        private async Task FetchForecastData()
        {
            var requestUri = $"https://pro.openweathermap.org/data/2.5/forecast/hourly?lat={this.latitude}&lon={this.longtitude}&appid={this.apiKey}";
            this.forecastData = await SendHttpRequest(requestUri);
        }

        private async Task FetchDailyForecastData()
        {
            var requestUri = $"https://api.openweathermap.org/data/2.5/forecast/daily?lat={this.latitude}&lon={this.longtitude}&appid={this.apiKey}";
            this.dailyForecastData = await SendHttpRequest(requestUri);
        }

        public async Task FetchWeatherData()
        {
            await this.FetchCurrentData();
            await this.FetchForecastData();
            await this.FetchDailyForecastData();
        }

        public string? CurrentData() => this.currentData;
        public string? ForecastData() => this.forecastData;
        public string? DailyForecastData() => this.dailyForecastData;
    }

    [JSInvokableAttribute]
    public async Task UpdateWeatherData(double longitude, double latitude)
    {
        if (openWeatherAPI is not null)
        {
            openWeatherAPI.SetLongitudeLatitude(longitude, latitude);
            await openWeatherAPI.FetchWeatherData();
            string? currentData = openWeatherAPI.CurrentData();
            string? forecastData = openWeatherAPI.ForecastData();
            string? dailyForecastData = openWeatherAPI.DailyForecastData();
            await JS.InvokeVoidAsync("updateData", currentData, forecastData, dailyForecastData);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var lDotNetReference = DotNetObjectReference.Create(this);
            openWeatherAPI = new OpenWeatherAPI(defaultLongitude, defaultLatitude);
            await JS.InvokeVoidAsync("setDotnetReference", lDotNetReference);
            await JS.InvokeVoidAsync("loadMap", defaultLatitude, defaultLongitude);
            await UpdateWeatherData(this.defaultLongitude, this.defaultLatitude);
        }
    } 
}